
@{
    ViewBag.Title = "Login";
}
<style>
    body {
        padding-top: 90px;
    }

    .panel-login {
        border-color: #ccc;
        -webkit-box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.2);
        -moz-box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.2);
        box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.2);
    }

        .panel-login > .panel-heading {
            color: #00415d;
            background-color: #fff;
            border-color: #fff;
            text-align: center;
        }

            .panel-login > .panel-heading a {
                text-decoration: none;
                color: #666;
                font-weight: bold;
                font-size: 15px;
                -webkit-transition: all 0.1s linear;
                -moz-transition: all 0.1s linear;
                transition: all 0.1s linear;
            }

                .panel-login > .panel-heading a.active {
                    color: #029f5b;
                    font-size: 18px;
                }

            .panel-login > .panel-heading hr {
                margin-top: 10px;
                margin-bottom: 0px;
                clear: both;
                border: 0;
                height: 1px;
                background-image: -webkit-linear-gradient(left,rgba(0, 0, 0, 0),rgba(0, 0, 0, 0.15),rgba(0, 0, 0, 0));
                background-image: -moz-linear-gradient(left,rgba(0,0,0,0),rgba(0,0,0,0.15),rgba(0,0,0,0));
                background-image: -ms-linear-gradient(left,rgba(0,0,0,0),rgba(0,0,0,0.15),rgba(0,0,0,0));
                background-image: -o-linear-gradient(left,rgba(0,0,0,0),rgba(0,0,0,0.15),rgba(0,0,0,0));
            }

        .panel-login input[type="text"], .panel-login input[type="email"], .panel-login input[type="password"] {
            height: 45px;
            border: 1px solid #ddd;
            font-size: 16px;
            -webkit-transition: all 0.1s linear;
            -moz-transition: all 0.1s linear;
            transition: all 0.1s linear;
        }

        .panel-login input:hover,
        .panel-login input:focus {
            outline: none;
            -webkit-box-shadow: none;
            -moz-box-shadow: none;
            box-shadow: none;
            border-color: #ccc;
        }

    .btn-login {
        background-color: #59B2E0;
        outline: none;
        color: #fff;
        font-size: 14px;
        height: auto;
        font-weight: normal;
        padding: 14px 0;
        text-transform: uppercase;
        border-color: #59B2E6;
    }

        .btn-login:hover,
        .btn-login:focus {
            color: #fff;
            background-color: #53A3CD;
            border-color: #53A3CD;
        }

    .forgot-password {
        text-decoration: underline;
        color: #888;
    }

        .forgot-password:hover,
        .forgot-password:focus {
            text-decoration: underline;
            color: #666;
        }

    .btn-register {
        background-color: #1CB94E;
        outline: none;
        color: #fff;
        font-size: 14px;
        height: auto;
        font-weight: normal;
        padding: 14px 0;
        text-transform: uppercase;
        border-color: #1CB94A;
    }

        .btn-register:hover,
        .btn-register:focus {
            color: #fff;
            background-color: #1CA347;
            border-color: #1CA347;
        }
</style>
@*<div id="logindiv">
        <input type="text" data-bind="value:uservm.username"/>
        <input type="text" data-bind="value:uservm.password"/>
        <button id="btnSubmit">Login</button>
    </div>*@
<div class="container" id="logindiv">
    <div class="row">
        <div class="col-md-6 col-md-offset-3">
            <div class="panel panel-login">
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-xs-6">
                            <a href="#" class="active" id="login-form-link">Login</a>
                        </div>
                        <div class="col-xs-6">
                            <a href="#" id="register-form-link">Register</a>
                        </div>
                    </div>
                    <hr>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-lg-12">
                            <div id="login-form" style="display: block;">
                                <div class="form-group">
                                    <input type="text" name="username" id="username" tabindex="1" class="form-control" placeholder="Username" value="" data-bind="value:UserVM.Login.UserName">
                                </div>
                                <div class="form-group">
                                    <input type="password" name="password" id="password" tabindex="2" class="form-control" placeholder="Password" data-bind="value: UserVM.Login.Password">
                                </div>
                                <div class="form-group text-center">
                                    <input type="checkbox" tabindex="3" class="" name="remember" id="remember">
                                    <label for="remember"> Remember Me</label>
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6 col-sm-offset-3">
                                            <input type="submit" name="login-submit" id="login-submit" tabindex="4" class="form-control btn btn-login" value="Log In">
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <div class="text-center">
                                                <a tabindex="5" class="forgot-password">Forgot Password?</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="register-form" style="display: none;">
                                <div class="form-group">
                                    <input type="text" name="FirstName" id="firstName" tabindex="1" class="form-control" placeholder="FirstName" data-bind="value:UserVM.Register.FirstName">
                                </div>
                                <div class="form-group">
                                    <input type="text" name="LastName" id="firstName" tabindex="1" class="form-control" placeholder="LastName" value="" data-bind="value:UserVM.Register.LastName">
                                </div>
                                <div class="form-group">
                                    <input type="email" name="Email" id="email" tabindex="1" class="form-control" placeholder="Email Address" value="" data-bind="value:UserVM.Register.Email">
                                </div>
                                <div class="form-group">
                                    <input type="text" name="Country" id="firstName" tabindex="1" class="form-control" placeholder="Country" value="" data-bind="value:UserVM.Register.Country">
                                </div>
                                <div class="form-group">
                                    <input type="text" name="Curreny" id="firstName" tabindex="1" class="form-control" placeholder="Curreny" value="" data-bind="value:UserVM.Register.Currency">
                                </div>
                                <div class="form-group">
                                    <input type="text" name="Promocode" id="firstName" tabindex="1" class="form-control" placeholder="Promocode" value="" data-bind="value:UserVM.Register.Promocode">
                                </div>
                                <div class="form-group">
                                    <input type="password" name="password" id="password" tabindex="2" class="form-control" placeholder="Password" data-bind="value:UserVM.Register.Password">
                                </div>
                                <div class="form-group">
                                    <input type="password" name="confirm-password" id="confirm-password" tabindex="2" class="form-control" placeholder="Confirm Password" data-bind="value:UserVM.Register.Password">
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6 col-sm-offset-3">
                                            <input type="submit" name="register-submit" id="register-submit" tabindex="4" class="form-control btn btn-register" value="Register Now">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script>




        var UserVM = {}
        //UserVM.Login = {
        //    UserName: ko.observable('ravi@gmail.com'),
        //    Password: ko.observable('admin123')
        //};
        //UserVM.SelectedAccounts = ko.observableArray([
        //    421, 424, 425
        //]);
        UserVM.TaskEnum = {

          
            OwnerId: ko.observable(47),
            DataOwnerTypeId: ko.observable(2),
        };

        UserVM.ClientS = {


            ClientId: ko.observable(43),
            IsStarred: ko.observable(1),
        };
        
        UserVM.CreatEmail = {

            To: ko.observable(''),
            Subject: ko.observable('hdfdf'),
            Body: ko.observable('Lead'),
            Sender: ko.observable('dgdg'),
            OwnerId: ko.observable(2),
            UserId: ko.observable(3),
        };

        //var em = 'kk84singh@gmail.com,kksinghjss@gmail.com';
        //UserVM.CreatEmail = {

        //    To: ko.observable(em),
        //    Subject: ko.observable('hdfdf'),
        //    Body: ko.observable('Lead'),
        //    Sender: ko.observable('dgdg'),
        //    OwnerId: ko.observable(2),
        //    UserId: ko.observable(2),
        //};

        // UserVM.CreatEmail = {
           
        //    To: ko.observable('kk84singh@gmail.com'),
        //    Subject: ko.observable('hdfdf'),
        //    Body: ko.observable('Lead'),
        //    Sender: ko.observable('dgdg'),
        //    OwnerId: ko.observable(2),
        //};

        //UserVM.UserInsert = {

        //    FirstName: ko.observable('ghgtt ggf'),
        //    LastName: ko.observable('Ldgdgdead'),
        //    Email: ko.observable('dfgg@gmail.com'),
        //    Phone: ko.observable(0),
        //    Password: ko.observable('hdfdf'),
        //    OwnerId: ko.observable(2),
        //    DeskId: ko.observable(1),
        //    IsDisabled: ko.observable(0),
        //    UserName: ko.observable('wewew'),
        //    IsAffiliateUser: ko.observable(1),
        //    ImageName: ko.observable('3'),
        //    LockoutEnabled: ko.observable(0),
        //    CampaignCode: ko.observable('24234224'),
        //    AffiliateFieldId: ko.observable(1),
        //    AffiliateFieldName: ko.observable('wewew'),
        //    DeskName: ko.observable('wewew'),
        //    RoleId: ko.observable(1),
        //    RoleName: ko.observable('85'),
        //    DepartmentId: ko.observable(1),
        //    DepartmentName: ko.observable('fdfd'),
        //    SharedDeskId: ko.observable(1),
        //    SharedDeskName: ko.observable('1'),
        //    TimezoneId: ko.observable(1),
        //    TimezoneName: ko.observable('hdfdf'),
        //    CultureCode: ko.observable('Lead'),
        //    CultureCodeId: ko.observable(1),
        //    UiCultureCode: ko.observable('wewew'),
        //    UiCultureCodeId: ko.observable(1),
        //    StartModuleId: ko.observable(1),
        //    StartModuleName: ko.observable('3'),
        //    DefaultSenderId: ko.observable(1),
        //    DefaultSenderName: ko.observable('24234224'),
        //    SharedSenderId: ko.observable(1),
        //    SharedSenderName: ko.observable('wewew'),
        //};
        //UserVM.UserEdit = {
              
        //      FirstName: ko.observable('fdfd'),
        //      LastName: ko.observable('Ldgdgdead'),
        //      Email: ko.observable('tomnick@gmail.com'),
        //      Phone: ko.observable(0),
        //      Password: ko.observable('hdfdf'),
        //      OwnerId: ko.observable('Lead'),
        //      DeskId: ko.observable(1),
        //      IsDisabled: ko.observable(0),
        //      UserName: ko.observable('wewew'),
        //      IsAffiliateUser: ko.observable(1),
        //      ImageName: ko.observable('3'),
        //      LockoutEnabled: ko.observable(0),
        //      CampaignCode: ko.observable('24234224'),
        //      AffiliateFieldId: ko.observable(1),
        //      AffiliateFieldName: ko.observable('wewew'),
        //      DeskName: ko.observable('wewew'),
        //      RoleId: ko.observable(1),
        //      RoleName: ko.observable('85'),
        //      DepartmentId: ko.observable(1),
        //      DepartmentName: ko.observable('fdfd'),
        //      SharedDeskId: ko.observable(1),
        //      SharedDeskName: ko.observable('1'),
        //      TimezoneId: ko.observable(1),
        //      TimezoneName: ko.observable('hdfdf'),
        //      CultureCode: ko.observable('Lead'),
        //      CultureCodeId: ko.observable(1),
        //      UiCultureCode: ko.observable('wewew'),
        //      UiCultureCodeId: ko.observable(1),
        //      StartModuleId: ko.observable(1),
        //      StartModuleName: ko.observable('3'),
        //      DefaultSenderId: ko.observable(1),
        //      DefaultSenderName: ko.observable('24234224'),
        //      SharedSenderId: ko.observable(1),
        //      SharedSenderName: ko.observable('wewew'),
        //};

        //  UserVM.AdditionInfo = {
             
        //      AcceptedTermConditions: ko.observable(0),
        //      Description: ko.observable('dfhdf'),
        //      OwnerId: ko.observable('3'),             
        //      IsOnline: ko.observable(0),
        //      PromoCode: ko.observable('ghd'),
        //      SubscribedNewsletter: ko.observable(1),
        //      SuppliedDocs: ko.observable(1),
        //};
        //UserVM.MarketingInfo = {
        //    AffiliateID: ko.observable('fdfd'),
        //    AffiliateUser: ko.observable('Ldgdgdead'),
        //    AffiliateUserId: ko.observable('1'),
        //    AffTransactionID: ko.observable(0),
        //    CampaignID: ko.observable('hdfdf'),
        //    IPAddress: ko.observable('Lead'),
        //    IPCountry: ko.observable('dgdg'),
        //    Referrer: ko.observable('wewew'),
        //    Source: ko.observable(0),
        //    SubAffiliateID: ko.observable(1),
        //    OwnerId: ko.observable('3'),
        //    Tag1: ko.observable('85'),
        //    Tag2: ko.observable('24234224'),
        //    UtmCampaign: ko.observable('wewew'),
        //    UtmContent: ko.observable(0),
        //    UtmCreative: ko.observable(1),
        //    UtmMedium: ko.observable('1'),
        //    UtmSource: ko.observable('85'),
        //    GoogleKeyword: ko.observable('24234224'),
        //};
        //UserVM.Register = {
        //    Description: ko.observable('jgjj'),
        //    Name: ko.observable('kk gg'),
        //    CurrencyId: ko.observable(1),           
        //    CurrencyName: ko.observable('phd'),
        //    Id: ko.observable('1'),
        //};
        //UserVM.Register = {
        //    FirstName: ko.observable('fdfd'),
        //    LastName: ko.observable('Ldgdgdead'),
        //    Email: ko.observable('kk84singh@gmail.com'),
        //    CountryId: ko.observable(0),
        //    GroupName: ko.observable('hdfdf'),
        //    AccountType: ko.observable('Lead'),
        //    Password: ko.observable('dgdg'),
        //    CountryName: ko.observable('wewew'),
        //    GroupId: ko.observable(0),
        //    ISendEmail: ko.observable(1),
        //    OwnerId: ko.observable('1'),
        //    Id: ko.observable('15'),
        //    Phone: ko.observable('24234224'),
        //};
        UserVM.Group = {
            Name: ko.observable('fdfd'),
            InitialDeposit: ko.observable('Ldgdgdead'),
            StopOut: ko.observable('kk84singh@gmail.com'),
            MarginCall: ko.observable(0),
            OrderCount: ko.observable(3),
            Demo: ko.observable(0),
            MinDeposit: ko.observable(6),
            AllowTrade: ko.observable(1),
            CurrencyId: ko.observable(2),
            CurrencyName: ko.observable('rt'),
            Description: ko.observable('test des'),
            Id: ko.observable(20),
            LeverageId: ko.observable('2'),
            LeverageName: ko.observable(1.5),
            UserId: ko.observable(4)
        };
        //UserVM.CreateTask = {
           
        //    TaskTypeId: ko.observable(2),
        //    TaskType: ko.observable('Meeting'),
        //    TaskStatusId: ko.observable(1),
        //    TaskStatus: ko.observable('New'),
        //    NotiTrasportId: ko.observable(1),
        //    NotiTimeBefore: ko.observable('Popup'),           
        //    Description: ko.observable('test des 4 cowner'),
        //    OwnerId: ko.observable(4),
        //    DataOwnerTypeId: ko.observable(1),
        //    DataOwnerTypeName: ko.observable('Owner'),
        //    TaskDate: ko.observable('2020-08-05')
        //};


        //UserVM.EditTask = {
        //    Id: ko.observable(12),
        //    TaskTypeId: ko.observable(2),
        //    TaskType: ko.observable('Meeting'),
        //    TaskStatusId: ko.observable(1),
        //    TaskStatus: ko.observable('New'),
        //    NotiTrasportId: ko.observable(1),
        //    NotiTimeBefore: ko.observable('Popup'),
        //    Description: ko.observable('test des 19 cowner'),
        //    OwnerId: ko.observable(19),
        //    DataOwnerTypeId: ko.observable(2),
        //    DataOwnerTypeName: ko.observable('Client'),
        //    TaskDate: ko.observable('2020-07-05')
        //};


          UserVM.CreateInstrument = {

              Name: ko.observable('Meeting'),
              DisplayName: ko.observable('Meeting'),
              GroupId: ko.observable(2),
              GroupName: ko.observable('Meeting'),
              SpreadTypeName: ko.observable('Meeting'),
              SpreadBid: ko.observable(1),            
              IsTradeForbidden: ko.observable(1),           
              ContractSize: ko.observable(4),
              LeverageId: ko.observable('2'),
              LeverageName: ko.observable('yd'),
              ProfitCurrencyName: ko.observable('fdf'),
              SymbolGroupName: ko.observable('g'),              
              GapLevel: ko.observable(45),
              TradingHourId: ko.observable(2),
              UnitName: ko.observable('gsfsf'),
              MarginCurrencyName: ko.observable('Meeting'),
              Description: ko.observable('Meeting'),
              SpreadAsk: ko.observable(2),
              MaximalVolume: ko.observable(3),
              VolumeStep: ko.observable(3),
              MinimalVolume: ko.observable(1),
              MarginHedge: ko.observable(1),
              SwapLong: ko.observable(4),
              SwapShort: ko.observable('2'),
              StopLevel: ko.observable('yd'),
              Digits: ko.observable('fdf'),
              CalculationModeName: ko.observable('g'),
              Commission: ko.observable(45),
              SwapTypeName: ko.observable('32'),
              ThreeDaysSwapName: ko.observable('3'),
              CommissionCurrencyName: ko.observable('3'),
              Hidden: ko.observable(1),
              ExpirationDate: ko.observable('2020-04-04'),
              IsDisabled: ko.observable(1),
              SpreadTypeId: ko.observable(1),
              ProfitCurrencyId: ko.observable(1),
              SymbolGroupId: ko.observable(1),
              TradingHoursName: ko.observable('hfdfd'),
              UnitId: ko.observable(1),
              MarginCurrencyId: ko.observable(1),
              CalculationModeId: ko.observable(1),
              SwapTypeId: ko.observable(1),
              ThreeDaysSwapId: ko.observable(1),
              CommissionCurrencyId: ko.observable(1),
              UserId: ko.observable(2)
        };


        UserVM.EditInstrument = {
            Id: ko.observable(49),
            Name: ko.observable('Meeting'),
            DisplayName: ko.observable('Meeting'),
            GroupId: ko.observable(2),
            GroupName: ko.observable('Meeting'),
            SpreadTypeName: ko.observable('Meeting'),
            SpreadBid: ko.observable(1),
            IsTradeForbidden: ko.observable(1),
            ContractSize: ko.observable(4),
            LeverageId: ko.observable('2'),
            LeverageName: ko.observable('yd'),
            ProfitCurrencyName: ko.observable('fdf'),
            SymbolGroupName: ko.observable('g'),
            GapLevel: ko.observable(45),
            TradingHourId: ko.observable(2),
            UnitName: ko.observable('gsfsf'),
            MarginCurrencyName: ko.observable('Meeting'),
            Description: ko.observable('Meeting'),
            SpreadAsk: ko.observable(2),
            MaximalVolume: ko.observable(3),
            VolumeStep: ko.observable(3),
            MinimalVolume: ko.observable(1),
            MarginHedge: ko.observable(1),
            SwapLong: ko.observable(4),
            SwapShort: ko.observable('2'),
            StopLevel: ko.observable('yd'),
            Digits: ko.observable('fdf'),
            CalculationModeName: ko.observable('g'),
            Commission: ko.observable(45),
            SwapTypeName: ko.observable('32'),
            ThreeDaysSwapName: ko.observable('3'),
            CommissionCurrencyName: ko.observable('3'),
            Hidden: ko.observable(1),
            ExpirationDate: ko.observable('2020-04-04'),
            IsDisabled: ko.observable(1),
            SpreadTypeId: ko.observable(1),
            ProfitCurrencyId: ko.observable(1),
            SymbolGroupId: ko.observable(1),
            TradingHoursName: ko.observable('hfdfd'),
            UnitId: ko.observable(1),
            MarginCurrencyId: ko.observable(1),
            CalculationModeId: ko.observable(1),
            SwapTypeId: ko.observable(1),
            ThreeDaysSwapId: ko.observable(1),
            CommissionCurrencyId: ko.observable(1),
        };

        // UserVM.Selectedidinstrs = ko.observableArray([
        //    5
        //]);

        //   UserVM.CreateWorkFlow = {

        //      Name: ko.observable('fd'),
        //      Event: ko.observable('qw'),
        //      UserId: ko.observable(2),
        //      UserName: ko.observable('vb'),
        //      ModuleId: ko.observable(2),
        //      ModuleName: ko.observable('g'),                          
        //      IsEnabled: ko.observable(1)           
              
        //};


        //UserVM.Editworkflow = {
        //    Id: ko.observable(4),
        //    Name: ko.observable('jhhhh fg'),
        //    Event: ko.observable('ssss vbb'),
        //    UserId: ko.observable(2),
        //    UserName: ko.observable('vb'),
        //    ModuleId: ko.observable(2),
        //    ModuleName: ko.observable('g'),
        //    IsEnabled: ko.observable(1)         
        //};


        //UserVM.CreateSenderSetting = {

        //      Name: ko.observable('fd'),
        //      Description: ko.observable('qw'),
        //      SenderMailId: ko.observable('fdfdf'),
        //      IsShared: ko.observable(1),
        //      ProviderId: ko.observable(2),
        //      ProviderName: ko.observable('g'),                          
        //       ServerAddress: ko.observable('fdfd'),
        //       PortNo: ko.observable(234),
        //       FromAddress: ko.observable('gfdf'),
        //       MailPassword: ko.observable('hgdg')   

        //};


        //UserVM.EditSenderSetting = {
        //    Id: ko.observable(4),
        //    Name: ko.observable('hghg hgh'),
        //    Description: ko.observable('hfhfh gg'),
        //    SenderMailId: ko.observable('gg gg'),
        //    IsShared: ko.observable(1),
        //    ProviderId: ko.observable(2),
        //    ProviderName: ko.observable('g'),
        //    ServerAddress: ko.observable('fdfd'),
        //    PortNo: ko.observable(234),
        //    FromAddress: ko.observable('ytt'),
        //    MailPassword: ko.observable('vccv')   
        //};

        //UserVM.CreateIPWhiteList = {

        //    IPAddress: ko.observable('fd'),
        //    Description: ko.observable('qw'),
        //      UserId: ko.observable(2)
             

        //};


        //UserVM.EditIPWhiteList = {
        //    Id: ko.observable(4),
        //    IPAddress: ko.observable('g kg'),
        //    Description: ko.observable('kg hg'),
        //    UserId: ko.observable(3)
          
        //};
        // UserVM.Selectedips = ko.observableArray([
        //    11,12
        //]);

        //UserVM.Sendsms = {
        //    OwnerId: ko.observable(''),
        //    MessageText: ko.observable('test ggg to ghg'),
        //    PhoneNumber: ko.observable(''),
        //    UserId: ko.observable(2)
        //};

        //var em = '(546) (987)-12333';
        //UserVM.SendsmsSelected = {

        //    PhoneNumber: ko.observable(em),
        //    MessageText: ko.observable('ghh'),           
        //    OwnerId: ko.observable(''),
        //    UserId: ko.observable(4),
        //};

        UserVM.CreateTradeAccount = {
            ClientId: ko.observable(189),
            GroupId: ko.observable(29),
            ISendEmail: ko.observable(0)
        };

        UserVM.EditTradeAccount = {
            Id: ko.observable(3),
            TPAccountNumber: ko.observable(26464),
            FTD: ko.observable(2),
            FTDDate: ko.observable(2),
            FtdAmount: ko.observable(2),
            LastTradeDate: ko.observable('2020-04-04'),
            LastDepositDate: ko.observable('2020-04-04'),
            GroupId: ko.observable(2),
            GroupName: ko.observable(2),
            ISendEmail: ko.observable(2),
            CurrencyId: ko.observable(2),
            CurrencyName: ko.observable(2),
            InitialDeposit: ko.observable(2),
            StopOut: ko.observable(2),
            MarginCall: ko.observable(2),
            OrderCount: ko.observable(2),
            MinDeposit: ko.observable(2),
            CloseProfit: ko.observable(2),
            CloseLoss: ko.observable(2),
            TotalDeposit: ko.observable(2),
            TotalWithdrawal: ko.observable(2),
            NetDeposit: ko.observable(2),
            OpenProfit: ko.observable(2),
            OpenLoss: ko.observable(2),
            Commission: ko.observable(2),
            Equity: ko.observable(2),
            Balance: ko.observable(2),
            MarginLevel: ko.observable(2),
            FreeMargin: ko.observable(2),
            Credit: ko.observable(2),
            Volume: ko.observable(2),
            AllowTrade: ko.observable(2),
            DepositCount: ko.observable(2),
            UserId: ko.observable(2),
            ClientId: ko.observable(2),
            AccountId: ko.observable(2),        
        };

        UserVM.TradeAccountVM = {
            OwnerId: ko.observable(4),
            TypeName: ko.observable('Real')
           
        };
        $(document).ready(function () {

              $.ajax({
                type: "get",
                  url: 'http://localhost:59122/api/TradeAccount/GetTransactionApprovalEnum',
                contentType: 'application/json',
                processData: false,
                  success: function (data) {
                      alert(data.Name);
                },
                error: function (data) {
                    shownotification(10000, 'info', 'Error', 'Something went wrong');
                }
            });

            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/GetTradeAccountByType",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.TradeAccountVM),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/GetTradeAccountDetailWithAddressById?email=KaranSingh@gmail.com",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/TradeAccount/DeleteTradeAccountById/1",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/TradeAccount/GetAllTradeAccounts",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //   $.ajax({
            //    type: 'Post',
            //       url: apiURl + "api/TradeAccount/GetTradeAccountDetailById/3",
            //    contentType: 'application/json',
            //    processData: false,               
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/TradeAccount/UpdateTradeAccount",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.EditTradeAccount),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/TradeAccount/CreateTradeAccount",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.CreateTradeAccount),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Instrument/UpdateInstrument",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.EditInstrument),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Instrument/InsertInstrument",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.CreateInstrument),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Instrument/GetAllCurrencies/MarginCurrency',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            // });
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/Client/SendMessageToSelectedClients",
            //    contentType: 'application/json',
            //    processData: false,
            //     data: ko.toJSON(UserVM.SendsmsSelected),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});           
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/SendMessageToAllClients",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.Sendsms),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            // $.ajax({
            //    type: "get",
            //     url: 'http://localhost:59122/api/Client/GetShortMessageByOwnerId/186',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //  $.ajax({
            //    type: 'Post',
            //      url: apiURl + "api/Client/SendShortMessage",
            //    contentType: 'application/json',
            //    processData: false,
            //      data: ko.toJSON(UserVM.Sendsms),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //  $.ajax({
            //    type: 'Post',
            //      url: apiURl + "api/WorkFlow/DeleteWorkFlowById/37",
            //    contentType: 'application/json',
            //    processData: false,                 
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //  $.ajax({
            //    type: 'Post',
            //      url: apiURl + "api/IPWhiteList/DeleteMultipleIPWhiteList",
            //    contentType: 'application/json',
            //    processData: false,
            //      data: ko.toJSON(UserVM.Selectedips),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/IPWhiteList/GetAllIPWhiteLists",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/IPWhiteList/GetIPWhiteListDetailById/4",
            //    contentType: 'application/json',
            //    processData: false,               
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/IPWhiteList/DeleteIPWhiteListById/5",
            //    contentType: 'application/json',
            //    processData: false,                 
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/IPWhiteList/UpdateIPWhiteList",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.EditIPWhiteList),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/IPWhiteList/InsertIPWhiteList",
            //    contentType: 'application/json',
            //    processData: false,
            //     data: ko.toJSON(UserVM.CreateIPWhiteList),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});




            // $.ajax({
            //    type: "get",
            //     url: 'http://localhost:59122/api/SenderSetting/GetMailProviderEnum',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data.id);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/SenderSetting/GetAllSenderSettings",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/SenderSetting/GetSenderSettingDetailById/4",
            //    contentType: 'application/json',
            //    processData: false,               
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/SenderSetting/DeleteSenderSettingById/5",
            //    contentType: 'application/json',
            //    processData: false,                 
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/SenderSetting/UpdateSenderSetting",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.EditSenderSetting),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/SenderSetting/InsertSenderSetting",
            //    contentType: 'application/json',
            //    processData: false,
            //     data: ko.toJSON(UserVM.CreateSenderSetting),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});


            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/IPWhiteList/GetAllIPWhiteLists",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //// $.ajax({
            ////    type: 'Post',
            ////     url: apiURl + "api/IPWhiteList/GetIPWhiteListDetailById/4",
            ////    contentType: 'application/json',
            ////    processData: false,               
            ////    success: function (result) {
            ////        alert(result);
            ////    }
            ////});
            //// $.ajax({
            ////    type: 'Post',
            ////     url: apiURl + "api/IPWhiteList/DeleteIPWhiteListById/5",
            ////    contentType: 'application/json',
            ////    processData: false,                 
            ////    success: function (result) {
            ////        alert(result);
            ////    }
            ////});
            ////$.ajax({
            ////    type: 'Post',
            ////    url: apiURl + "api/IPWhiteList/UpdateIPWhiteList",
            ////    contentType: 'application/json',
            ////    processData: false,
            ////    data: ko.toJSON(UserVM.EditIPWhiteList),
            ////    success: function (result) {
            ////        alert(result);
            ////    }
            ////});
            //// $.ajax({
            ////    type: 'Post',
            ////     url: apiURl + "api/IPWhiteList/InsertIPWhiteList",
            ////    contentType: 'application/json',
            ////    processData: false,
            ////     data: ko.toJSON(UserVM.CreateIPWhiteList),
            ////    success: function (result) {
            ////        alert(result);
            ////    }
            ////});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Instrument/GetAllInstruments",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/Instrument/GetInstrumentDetailById/4",
            //    contentType: 'application/json',
            //    processData: false,               
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/Instrument/DeleteMultipleInstrument",
            //    contentType: 'application/json',
            //    processData: false,
            //     data: ko.toJSON(UserVM.Selectedidinstrs),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
           
            //  $.ajax({
            //    type: 'Post',
            //      url: apiURl + "api/Task/GetTaskByOwnerId",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.TaskEnum),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            // $.ajax({
            //    type: "get",
            //     url: 'http://localhost:59122/api/Task/GetDataOwnerTypeEnum',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data.id);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Task/DeleteMultipleTasks",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.SelectedAccounts),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Task/InsertTask",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.CreateTask),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Task/UpdateOwnerTask",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.EditTask),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/EmailToSelectedClients",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.CreatEmail),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/Client/GetClientInfoDetailById/43",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/EmailToAllClients",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.CreatEmail),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/UpdateClientStarred",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.ClientS),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/GetUserById/5",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.UserInsert),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
             //$.ajax({
             //   type: 'Post',
             //    url: apiURl + "api/User/RegisterUser",
             //   contentType: 'application/json',
             //   processData: false,
             //   data: ko.toJSON(UserVM.UserInsert),
             //   success: function (result) {
             //       alert(result);
             //   }
             //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/User/UpdateUserDetail",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.UserEdit),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            //$.ajax({
            //    type: "get",
            //     url: 'http://localhost:59122/api/Common/GetAllDepartments',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            // });
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Common/GetAllDesks',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Common/GetAllModuleGroups',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Common/GetAllModules',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Common/GetAllRoles',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Common/GetAllTimeZones',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/InsertUpdateAdditionalInfo",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.AdditionInfo),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});


            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/TradeGroup/UpdateTradeGroup",
            //    contentType: 'application/json',
            //    processData: false,
            //     data: ko.toJSON(UserVM.Group),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/Client/InsertUpdateMarketingInfo",
            //     contentType: 'application/json',
            //     processData: false,
            //     data: ko.toJSON(UserVM.MarketingInfo),
            //     success: function (result) {
            //        alert(result);
            //    }
            //});

            // $.ajax({
            //    type: 'Post',
            //     url: apiURl + "api/TradeGroup/GetTradeGroupDetailById/2",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/TradeGroup/InsertTradeGroup",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.Group),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/UpdateClient",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.Register),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});

            ////$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/DeleteClient/82",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Client/GetRegistrationTypeEnum',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data.id);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/InsertUpdateAddress",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.Register),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/AddClient",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.Register),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
           
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/GetAllClientsByOwnerId/1",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: "get",
            //    url: 'http://localhost:59122/api/Client/GetClientDetailById/1',
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (data) {
            //        alert(data.id);
            //    },
            //    error: function (data) {
            //        shownotification(10000, 'info', 'Error', 'Something went wrong');
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/GetCommentByOwnerId/1",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/GetAddressByOwnerId/1",
            //    contentType: 'application/json',
            //    processData: false,
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            //$.ajax({
            //    type: 'Post',
            //    url: apiURl + "api/Client/InsertComment",
            //    contentType: 'application/json',
            //    processData: false,
            //    data: ko.toJSON(UserVM.Login),
            //    success: function (result) {
            //        alert(result);
            //    }
            //});
            $('#login-submit').on('click', function () {
                //$.ajax({
                //    url: "http://localhost:59122/api/User/UserList",
                //    success: function (result) {
                //        alert(result);
                //    }
                //});
                $.ajax({
                    type: 'Post',
                    url: apiURl + "api/User/IsAuthenticated",
                    contentType: 'application/json',
                    processData: false,
                    data: ko.toJSON(UserVM.Login),
                    success: function (result) {
                        alert(result);
                    }
                });
                //$.ajax({
                //    url: apiURl + "api/User/UserList",
                //    method: 'Get',
                //    async: false,
                //    contentType: 'application/json; charset=utf-8',
                //    data: ko.toJSON(UserVM),
                //    success: function (result) {
                //        alert(result);
                //    }
                //});
            });
            //$('#register-submit').on('click', function () {
            //    $.ajax({
            //        type: 'Post',
            //        url: apiURl + "api/User/RegisterUser",
            //        contentType: 'application/json',
            //        processData: false,
            //        data: ko.toJSON(UserVM.Register),
            //        success: function (result) {
            //            alert(result);
            //        }
            //    });
            //});
        });
    </script>

}